import React, { type Ref } from 'react'

import { IconProps } from '../Types'

export const Loof = React.forwardRef(
  (
    { title, fill = 'currentColor', stroke = 'none', ...props }: IconProps,
    ref: Ref<SVGSVGElement>
  ) => (
    <svg
      ref={ref}
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...{ ...(title && { 'data-title': title }), fill, stroke, ...props }}
      dangerouslySetInnerHTML={{
        __html:
          (title === undefined ? '' : `<title>${title}</title>`) +
          '<path fill-rule="evenodd" clip-rule="evenodd" d="M12.864 8.34796C14.0012 8.413 15.0405 9.56192 15.2438 9.79315L16.637 10.8192C16.7079 10.8717 16.7583 10.9455 16.7801 11.0288C16.9598 11.6984 16.8598 12.4088 16.5015 13.0087C16.2422 13.2921 15.8623 13.4465 15.4697 13.4278C14.7782 13.3707 14.101 13.6403 13.6548 14.1504C12.6607 15.3499 13.2933 17.7634 13.3008 17.7634C13.3436 17.9147 13.2797 18.0753 13.1426 18.1608C13.0726 18.1938 12.9941 18.2063 12.9167 18.1969C12.8319 18.1959 12.7498 18.1679 12.6833 18.1174L9.47505 15.6173C9.39571 15.5588 9.34449 15.472 9.33313 15.3766C9.32177 15.2813 9.35125 15.1856 9.4148 15.1114C9.54904 14.9579 9.78659 14.9354 9.9495 15.0609L12.382 16.9468C12.1664 15.8099 12.4028 14.6368 13.0447 13.659C13.6466 12.9681 14.5661 12.6082 15.4999 12.698C15.6613 12.7089 15.82 12.6538 15.9366 12.5462C16.1303 12.1596 16.1807 11.7212 16.0797 11.3034L14.7468 10.3423C14.7205 10.3245 14.6976 10.3025 14.679 10.2773C14.2213 9.68568 13.5683 9.2603 12.8263 9.07056C12.6184 9.06058 12.4582 8.89073 12.4686 8.69119C12.479 8.49166 12.656 8.33799 12.864 8.34796ZM7.90748 6.28449C7.98432 6.34729 8.03099 6.43755 8.03663 6.53425C8.06156 6.80008 8.0307 7.06248 7.95748 7.3193C7.99515 7.24916 8.0266 7.17503 8.05169 7.09787C8.07769 6.96101 8.18327 6.85063 8.32316 6.81406C8.46305 6.77749 8.61239 6.82123 8.70715 6.92653C8.8019 7.03183 8.82524 7.17997 8.76714 7.30743C8.52946 8.05571 7.89252 8.61775 7.10798 8.78909C6.64981 9.3332 6.1026 9.82071 5.65683 10.2195C5.05435 10.7614 4.7983 12.8353 4.76064 14.1432L8.37552 16.9468C8.16357 15.81 8.39978 14.6381 9.03825 13.659C9.63617 12.9758 10.5448 12.6168 11.4708 12.698C11.63 12.7096 11.7867 12.6542 11.9 12.5462C12.0992 12.1613 12.1524 11.7219 12.0507 11.3034L10.7026 10.3423C10.6771 10.3259 10.6564 10.3035 10.6424 10.2773C10.1828 9.68289 9.52722 9.25507 8.7822 9.06333C8.68227 9.05775 8.58876 9.01422 8.52234 8.94236C8.45593 8.8705 8.42207 8.77622 8.42824 8.68036C8.43406 8.58447 8.47942 8.49475 8.55432 8.43103C8.62921 8.3673 8.72747 8.33481 8.82738 8.34074C9.96457 8.40577 11.0038 9.55469 11.1996 9.78592L12.6004 10.812C12.6689 10.8652 12.7166 10.9391 12.736 11.0216C12.9256 11.6874 12.8364 12.3979 12.4875 13.0015C12.2269 13.2832 11.8479 13.4371 11.4557 13.4206C10.7606 13.3547 10.077 13.6257 9.6332 14.1432C8.63911 15.3427 9.27924 17.7561 9.28678 17.7561C9.32712 17.9074 9.26375 18.0666 9.12862 18.1536C9.05661 18.1888 8.97569 18.2039 8.89516 18.1969C8.81033 18.1959 8.72824 18.1679 8.6617 18.1174L4.1431 14.5912C4.05202 14.5208 3.99935 14.4144 4.00001 14.3021C4.00001 13.9336 4.09038 10.6386 5.09954 9.72812C5.51549 9.3563 6.04221 8.87821 6.47529 8.36377C6.50073 8.27396 6.5622 8.19745 6.64515 8.15026C7.0432 7.63781 7.32248 7.09836 7.29106 6.59928C7.28056 6.50336 7.31046 6.4074 7.37412 6.33275C7.43777 6.2581 7.52989 6.21097 7.62995 6.20186C7.73035 6.19182 7.83064 6.22169 7.90748 6.28449ZM17.0061 8.34074C18.1432 8.40577 19.1825 9.55469 19.3783 9.78592L20.7716 10.812C20.8425 10.8631 20.8909 10.9379 20.9071 11.0216C21.094 11.6899 20.9965 12.4021 20.636 13.0015C20.3788 13.2876 19.9974 13.4426 19.6042 13.4206C18.9094 13.356 18.2264 13.6267 17.7817 14.1432C16.7877 15.3427 17.4278 17.7561 17.4353 17.7561C17.4781 17.9075 17.4142 18.0681 17.2772 18.1536C17.2146 18.185 17.1444 18.2 17.0738 18.1969C16.9869 18.1949 16.9027 18.1671 16.8328 18.1174L13.6171 15.6173C13.458 15.491 13.4345 15.2654 13.5644 15.1114C13.6264 15.0364 13.7175 14.9887 13.8168 14.9791C13.9161 14.9696 14.0153 14.9991 14.0916 15.0609L16.5316 16.9468C16.3159 15.8099 16.5524 14.6368 17.1943 13.659C17.7899 12.977 18.6957 12.618 19.6193 12.698C19.7822 12.7211 19.9464 12.6641 20.0561 12.5462C20.2497 12.1596 20.3002 11.7212 20.1992 11.3034L18.8813 10.3423L18.8135 10.2701C18.3544 9.67669 17.6983 9.25107 16.9533 9.06333C16.7471 9.04794 16.5906 8.87864 16.5994 8.68036C16.6051 8.58312 16.6515 8.49224 16.7281 8.4283C16.8047 8.36436 16.9049 8.33279 17.0061 8.34074ZM12.0732 6.53425C12.0906 6.73371 12.0843 6.93236 12.056 7.12684L12.0657 7.09787C12.0936 7.00423 12.1596 6.92533 12.249 6.87908C12.3383 6.83283 12.4433 6.82313 12.5402 6.85219C12.7378 6.91435 12.848 7.11615 12.7887 7.30743C12.5432 8.08035 11.8717 8.65456 11.0516 8.80474C10.9988 8.82439 10.9412 8.83128 10.8833 8.82487C10.6754 8.83685 10.4967 8.68479 10.4842 8.48526C10.4735 8.31473 10.5877 8.16471 10.751 8.11721C11.1602 7.71679 11.3694 7.16311 11.3201 6.59928C11.3014 6.39975 11.4548 6.22343 11.6628 6.20547C11.8708 6.18751 12.0545 6.33471 12.0732 6.53425ZM14.6413 8.48526C14.6325 8.34494 14.7083 8.21851 14.8264 8.15165L14.7468 8.22512C15.2285 7.81643 15.4823 7.2144 15.4321 6.59928C15.42 6.47021 15.4805 6.34473 15.591 6.27013C15.7014 6.19553 15.845 6.18314 15.9675 6.23762C16.0901 6.2921 16.1731 6.40517 16.1852 6.53425C16.2086 6.80473 16.1889 7.07371 16.1292 7.33283L16.1109 7.40437C16.1697 7.30914 16.2176 7.20651 16.253 7.09787C16.2808 7.00423 16.3469 6.92533 16.4362 6.87908C16.5255 6.83283 16.6305 6.82313 16.7274 6.85219C16.925 6.91435 17.0352 7.11615 16.9759 7.30743C16.7175 8.12099 15.9871 8.7144 15.1082 8.82487L15.0405 8.82489C14.8325 8.83685 14.6538 8.68479 14.6413 8.48526Z"/>',
      }}
    />
  )
)

Loof.displayName = 'Loof'

export const tags = ['loof', 'criteria', 'animals']
