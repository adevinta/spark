import React, { type Ref } from 'react'

import { IconProps } from '../Types'

export const LastFloor = React.forwardRef(
  (
    { title, fill = 'currentColor', stroke = 'none', ...props }: IconProps,
    ref: Ref<SVGSVGElement>
  ) => (
    <svg
      ref={ref}
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...{ ...(title && { 'data-title': title }), fill, stroke, ...props }}
      dangerouslySetInnerHTML={{
        __html:
          (title === undefined ? '' : `<title>${title}</title>`) +
          '<path fill-rule="evenodd" clip-rule="evenodd" d="M16.3884 4.19995L16.4501 4.20465C16.5309 4.21708 16.6058 4.2538 16.6646 4.3102C16.7381 4.37995 16.7796 4.4752 16.7796 4.5742L16.7859 9.31045L17.5995 9.3097C17.8154 9.3097 17.9906 9.47695 17.9914 9.6847L18 18.8182C18 19.0245 17.8248 19.1932 17.6088 19.1932L17.5386 19.1872C17.3562 19.1554 17.2177 19.0022 17.2177 18.8182L17.2091 10.0597L7.78231 10.0672L7.79091 18.825C7.79091 19.032 7.61567 19.2 7.39976 19.2L7.32948 19.1939C7.14706 19.1623 7.00861 19.0096 7.00861 18.825L7 9.6922C7 9.5932 7.04068 9.4972 7.11422 9.4267C7.18697 9.3562 7.28711 9.3172 7.39037 9.3172L8.21961 9.31645L8.21414 4.58545C8.21336 4.37845 8.38859 4.2097 8.60451 4.2097L16.3884 4.19995ZM11.0913 16.8389L11.1616 16.8449C11.344 16.8767 11.4825 17.0298 11.4825 17.2131L11.484 18.8219C11.4848 19.0289 11.3096 19.1976 11.0936 19.1976C10.8777 19.1976 10.7025 19.0296 10.7017 18.8234L10.7001 17.5889L9.86152 17.5904L9.86386 18.8234C9.86386 19.0304 9.68941 19.1984 9.47271 19.1984L9.40243 19.1924C9.22002 19.1607 9.08156 19.0081 9.08156 18.8241L9.07921 17.2161C9.07921 17.1164 9.11989 17.0211 9.19343 16.9499C9.26618 16.8801 9.36554 16.8404 9.46958 16.8404L11.0913 16.8389ZM15.5273 16.8389L15.5976 16.8449C15.78 16.8767 15.9184 17.0298 15.9184 17.2131L15.9208 18.8219C15.9208 19.0289 15.7463 19.1976 15.5296 19.1976L15.4594 19.1916C15.2769 19.1598 15.1385 19.0067 15.1385 18.8234L15.1361 17.5889L14.2983 17.5904L14.2998 18.8234C14.3006 19.0304 14.1254 19.1984 13.9095 19.1984C13.6928 19.1984 13.5183 19.0311 13.5175 18.8241L13.5152 17.2161C13.5152 17.1164 13.5559 17.0211 13.6294 16.9499C13.703 16.8801 13.8023 16.8404 13.9063 16.8404L15.5273 16.8389ZM11.0917 11.7954C11.195 11.7954 11.2943 11.8352 11.3678 11.9049C11.4414 11.9754 11.4828 12.0707 11.4828 12.1704L11.4836 14.4714C11.6894 14.4834 11.8529 14.6424 11.8529 14.8427C11.8529 15.0497 11.6784 15.2177 11.4625 15.2177L9.10229 15.2184C8.88559 15.2184 8.71035 15.0512 8.71035 14.8434C8.71035 14.6439 8.87542 14.4834 9.08117 14.4722L9.07882 12.1719C9.07882 11.9657 9.25406 11.7969 9.46997 11.7969L11.0909 11.7954H11.0917ZM15.5277 11.7954C15.6309 11.7954 15.7303 11.8352 15.8038 11.9049C15.8774 11.9754 15.9188 12.0707 15.9188 12.1704L15.9204 14.4714C16.1254 14.4834 16.2896 14.6424 16.2896 14.8427C16.2896 15.0497 16.1144 15.2177 15.8985 15.2177L13.5383 15.2184L13.468 15.2124C13.2856 15.1808 13.1471 15.0281 13.1471 14.8434C13.1471 14.6439 13.3114 14.4834 13.5172 14.4722L13.5156 12.1719C13.5156 11.9657 13.69 11.7969 13.906 11.7969L15.5269 11.7954H15.5277ZM10.7005 12.5454L9.86191 12.5469L9.86347 14.4677H10.7021L10.7005 12.5454ZM15.1365 12.5454L14.2979 12.5469L14.2995 14.4677H15.1381L15.1365 12.5454ZM15.9981 4.9507L8.99644 4.95895L9.00192 9.3157L16.0036 9.3112L15.9981 4.9507ZM13.3098 5.37648C13.4131 5.37648 13.5125 5.41623 13.586 5.48598C13.6595 5.55648 13.701 5.65173 13.701 5.75148L13.7018 8.05248C13.9067 8.06448 14.071 8.22348 14.071 8.42373C14.071 8.63073 13.8966 8.79873 13.6807 8.79873L11.3204 8.79948C11.1037 8.79948 10.9285 8.63223 10.9285 8.42448C10.9285 8.22498 11.0936 8.06448 11.2993 8.05323L11.297 5.75298C11.297 5.54673 11.4722 5.37798 11.6881 5.37798L13.3091 5.37648H13.3098ZM12.9187 6.12648L12.0801 6.12798L12.0816 8.04873H12.9195L12.9187 6.12648Z"/>',
      }}
    />
  )
)

export const tags = ['last-floor', 'criteria', 'location']
